import { NextRequest, NextResponse } from 'next/server';

// TypeScript interfaces
interface Translations {
    hindi: {
        rashis: string[];
        planets: string[];
        houses: string[];
    };
    english: {
        rashis: string[];
        planets: string[];
        houses: string[];
    };
}

interface PlanetaryData {
    [key: string]: {
        exaltation: number;
        debilitation: number;
        own: number;
    };
}

interface Nakshatra {
    name: string;
    lord: string;
    degrees: [number, number];
}

interface VimshottariPeriods {
    [key: string]: number;
}

interface Planet {
    planet: string;
    sign: string;
    degree: string;
    status: string;
    house: number;
    isRetrograde?: boolean;
    isCombust?: boolean;
}

interface House {
    houseNumber: number;
    rashi: any;
    planets: string[];
    houseName?: string;
    rashiName?: string;
}

interface DashaPeriod {
    planet: string;
    startDate: string;
    endDate: string;
    duration: number;
}

interface TwelfthHouseAnalysis {
    planets: Array<{
        name: string;
        degree: string;
        sign: string;
        isRetrograde: boolean;
        isCombust: boolean;
    }>;
    analysis: string;
    remedies: string[];
}

// Kundli Generator Class
class AccurateKundliGenerator {
    private translations: Translations;
    private signLords: string[];
    private planetaryData: PlanetaryData;
    private nakshatras: Nakshatra[];
    private vimshottariPeriods: VimshottariPeriods;
    constructor() {
        // Hindi and English translations
        this.translations = {
            hindi: {
                rashis: ['मेष', 'वृषभ', 'मिथुन', 'कर्क', 'सिंह', 'कन्या', 'तुला', 'वृश्चिक', 'धनु', 'मकर', 'कुम्भ', 'मीन'],
                planets: ['सूर्य', 'चंद्र', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि', 'राहु', 'केतु'],
                houses: ['लग्न', 'धन', 'सहज', 'बंधु', 'संतान', 'रिपु', 'जया', 'मृत्यु', 'धर्म', 'कर्म', 'लाभ', 'व्यय']
            },
            english: {
                rashis: ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'],
                planets: ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn', 'Rahu', 'Ketu'],
                houses: ['Lagna', 'Dhan', 'Sahaj', 'Bandhu', 'Santaan', 'Ripu', 'Jaya', 'Mrityu', 'Dharma', 'Karma', 'Labh', 'Vyaya']
            }
        };

        // CORRECTED Sign Lords (proper rulership)
        this.signLords = ['Mars', 'Venus', 'Mercury', 'Moon', 'Sun', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Saturn', 'Jupiter'];

        // CORRECTED Planetary characteristics
        this.planetaryData = {
            'Sun': { exaltation: 1, debilitation: 7, own: 5 },
            'Moon': { exaltation: 2, debilitation: 8, own: 4 },
            'Mars': { exaltation: 10, debilitation: 4, own: 1 },
            'Mercury': { exaltation: 6, debilitation: 12, own: 3 },
            'Jupiter': { exaltation: 4, debilitation: 10, own: 9 },
            'Venus': { exaltation: 12, debilitation: 6, own: 2 },
            'Saturn': { exaltation: 7, debilitation: 1, own: 10 }
        };

        // Nakshatras with correct lords
        this.nakshatras = [
            { name: 'Ashwini', lord: 'Ketu', degrees: [0, 13.33] },
            { name: 'Bharani', lord: 'Venus', degrees: [13.33, 26.67] },
            { name: 'Krittika', lord: 'Sun', degrees: [26.67, 40] },
            { name: 'Rohini', lord: 'Moon', degrees: [40, 53.33] },
            { name: 'Mrigashira', lord: 'Mars', degrees: [53.33, 66.67] },
            { name: 'Ardra', lord: 'Rahu', degrees: [66.67, 80] },
            { name: 'Punarvasu', lord: 'Jupiter', degrees: [80, 93.33] },
            { name: 'Pushya', lord: 'Saturn', degrees: [93.33, 106.67] },
            { name: 'Ashlesha', lord: 'Mercury', degrees: [106.67, 120] },
            { name: 'Magha', lord: 'Ketu', degrees: [120, 133.33] },
            { name: 'Purva Phalguni', lord: 'Venus', degrees: [133.33, 146.67] },
            { name: 'Uttara Phalguni', lord: 'Sun', degrees: [146.67, 160] },
            { name: 'Hasta', lord: 'Moon', degrees: [160, 173.33] },
            { name: 'Chitra', lord: 'Mars', degrees: [173.33, 186.67] },
            { name: 'Swati', lord: 'Rahu', degrees: [186.67, 200] },
            { name: 'Vishakha', lord: 'Jupiter', degrees: [200, 213.33] },
            { name: 'Anuradha', lord: 'Saturn', degrees: [213.33, 226.67] },
            { name: 'Jyeshtha', lord: 'Mercury', degrees: [226.67, 240] },
            { name: 'Mula', lord: 'Ketu', degrees: [240, 253.33] },
            { name: 'Purva Ashadha', lord: 'Venus', degrees: [253.33, 266.67] },
            { name: 'Uttara Ashadha', lord: 'Sun', degrees: [266.67, 280] },
            { name: 'Shravana', lord: 'Moon', degrees: [280, 293.33] },
            { name: 'Dhanishta', lord: 'Mars', degrees: [293.33, 306.67] },
            { name: 'Shatabhisha', lord: 'Rahu', degrees: [306.67, 320] },
            { name: 'Purva Bhadrapada', lord: 'Jupiter', degrees: [320, 333.33] },
            { name: 'Uttara Bhadrapada', lord: 'Saturn', degrees: [333.33, 346.67] },
            { name: 'Revati', lord: 'Mercury', degrees: [346.67, 360] }
        ];

        this.vimshottariPeriods = {
            'Sun': 6, 'Moon': 10, 'Mars': 7, 'Mercury': 17,
            'Jupiter': 16, 'Venus': 20, 'Saturn': 19, 'Rahu': 18, 'Ketu': 7
        };
    }

    // ACCURATE Julian Day calculation
    dateToJulianDay(date: Date) {
        const year = date.getFullYear();
        const month = date.getMonth() + 1;
        const day = date.getDate();
        const hour = date.getHours();
        const minute = date.getMinutes();
        
        const decimalHours = hour + minute / 60;
        
        let jd;
        let adjustedYear = year;
        let adjustedMonth = month;
        
        if (month <= 2) {
            adjustedYear--;
            adjustedMonth += 12;
        }
        
        const a = Math.floor(adjustedYear / 100);
        const b = 2 - a + Math.floor(a / 4);
        
        jd = Math.floor(365.25 * (adjustedYear + 4716)) + 
             Math.floor(30.6001 * (adjustedMonth + 1)) + 
             day + b - 1524.5 + decimalHours / 24;
        
        return jd;
    }

    // ACCURATE Planetary positions using professional algorithms
    calculateDetailedPlanetPosition(planet: string, jd: number, latitude: number, longitude: number) {
        const daysSinceEpoch = jd - 2451545.0;
        const centuries = daysSinceEpoch / 36525;
        
        let meanLongitude = 0;
        let isRetrograde = false;
        let isCombust = false;
        
        if (planet === 'Ascendant') {
            meanLongitude = this.calculateAccurateAscendant(jd, latitude, longitude);
        } else {
            // ACCURATE planetary positions using professional algorithms
            switch(planet) {
                case 'Sun':
                    const L0 = 280.46645 + 36000.76983 * centuries + 0.0003032 * centuries * centuries;
                    const M = 357.52910 + 35999.05030 * centuries - 0.0001559 * centuries * centuries;
                    const C = (1.914600 - 0.004817 * centuries - 0.000014 * centuries * centuries) * Math.sin(M * Math.PI / 180) +
                             (0.019993 - 0.000101 * centuries) * Math.sin(2 * M * Math.PI / 180) +
                             0.000290 * Math.sin(3 * M * Math.PI / 180);
                    meanLongitude = L0 + C;
                    break;
                    
                case 'Moon':
                    const Lm = 218.3164477 + 481267.88123421 * centuries - 0.0015786 * centuries * centuries;
                    const Mm = 477198.8675055 + 1209600.7698 * centuries + 0.0003106 * centuries * centuries;
                    const perturbation = 6.288774 * Math.sin(Mm * Math.PI / 180) +
                                       1.274018 * Math.sin((2 * 297.8501921 - Mm) * Math.PI / 180) +
                                       0.658309 * Math.sin(2 * 297.8501921 * Math.PI / 180);
                    meanLongitude = Lm + perturbation;
                    break;
                    
                case 'Mars':
                    const Lm1 = 355.433275 + 19141.6964746 * centuries + 0.0003106 * centuries * centuries;
                    const Mm1 = 19.373264 + 382.8964489 * centuries + 0.0000071 * centuries * centuries;
                    const marsPerturbation = 10.691 * Math.sin(Mm1 * Math.PI / 180) +
                                           0.623 * Math.sin(2 * Mm1 * Math.PI / 180);
                    meanLongitude = Lm1 + marsPerturbation;
                    isRetrograde = this.calculateAccurateRetrograde(planet, jd);
                    break;
                    
                case 'Mercury':
                    const Lm2 = 252.250906 + 149472.6746358 * centuries - 0.0006355 * centuries * centuries;
                    const Mm2 = 168.656222 + 149472.5152889 * centuries + 0.0000090 * centuries * centuries;
                    const mercuryPerturbation = 23.440 * Math.sin(Mm2 * Math.PI / 180) +
                                              2.981 * Math.sin(2 * Mm2 * Math.PI / 180);
                    meanLongitude = Lm2 + mercuryPerturbation;
                    isRetrograde = this.calculateAccurateRetrograde(planet, jd);
                    isCombust = this.calculateAccurateCombust(planet, jd);
                    break;
                    
                case 'Jupiter':
                    const Lj = 34.351519 + 3034.9056606 * centuries - 0.0000850 * centuries * centuries;
                    const Mj = 19.895848 + 3034.9060976 * centuries - 0.0000850 * centuries * centuries;
                    const jupiterPerturbation = 5.208 * Math.sin(Mj * Math.PI / 180) +
                                              0.251 * Math.sin(2 * Mj * Math.PI / 180);
                    meanLongitude = Lj + jupiterPerturbation;
                    isRetrograde = this.calculateAccurateRetrograde(planet, jd);
                    break;
                    
                case 'Venus':
                    const Lv = 181.979801 + 58517.8156760 * centuries + 0.0000011 * centuries * centuries;
                    const Mv = 212.603219 + 58517.8038750 * centuries + 0.0000011 * centuries * centuries;
                    const venusPerturbation = 0.773 * Math.sin(Mv * Math.PI / 180) +
                                            0.022 * Math.sin(2 * Mv * Math.PI / 180);
                    meanLongitude = Lv + venusPerturbation;
                    isRetrograde = this.calculateAccurateRetrograde(planet, jd);
                    isCombust = this.calculateAccurateCombust(planet, jd);
                    break;
                    
                case 'Saturn':
                    const Ls = 50.077444 + 1222.1138488 * centuries + 0.0002101 * centuries * centuries;
                    const Ms = 316.967018 + 1222.1138488 * centuries + 0.0002101 * centuries * centuries;
                    const saturnPerturbation = 0.812 * Math.sin(Ms * Math.PI / 180) +
                                             0.229 * Math.sin(2 * Ms * Math.PI / 180);
                    meanLongitude = Ls + saturnPerturbation;
                    isRetrograde = this.calculateAccurateRetrograde(planet, jd);
                    break;
                    
                case 'Rahu':
                    const Lr = 125.044555 - 1934.136185 * centuries + 0.0020762 * centuries * centuries;
                    meanLongitude = Lr;
                    isRetrograde = true;
                    break;
                    
                case 'Ketu':
                    const Lk = (125.044555 - 1934.136185 * centuries + 0.0020762 * centuries * centuries + 180) % 360;
                    meanLongitude = Lk;
                    isRetrograde = true;
                    break;
            }
        }
        
        // Normalize to 0-360 degrees
        meanLongitude = meanLongitude % 360;
        if (meanLongitude < 0) meanLongitude += 360;
        
        // Calculate rashi (zodiac sign)
        const rashiIndex = Math.floor(meanLongitude / 30);
        const degree = meanLongitude % 30;
        
        // Calculate nakshatra
        const nakshatra = this.calculateNakshatra(meanLongitude);
        
        // Calculate house position
        const house = this.calculateHousePosition(meanLongitude, jd, latitude, longitude);
        
        // Calculate planetary status
        const status = this.calculatePlanetaryStatus(planet, rashiIndex + 1);
        const avastha = this.calculatePlanetaryAvastha(planet, degree);
        
        // Calculate CORRECT sign lord
        const signLord = this.signLords[rashiIndex];
        
        return {
            planet: planet,
            sign: this.translations.english.rashis[rashiIndex],
            signLord: signLord,
            nakshatra: nakshatra.name,
            nakshatraLord: nakshatra.lord,
            degree: this.formatDegree(degree),
            isRetrograde: isRetrograde,
            isCombust: isCombust,
            avastha: avastha,
            house: house,
            status: status,
            strength: status
        };
    }

    // ACCURATE Ascendant calculation using Lahiri Ayanamsa
    calculateAccurateAscendant(jd: number, latitude: number, longitude: number) {
        const daysSinceEpoch = jd - 2451545.0;
        const centuries = daysSinceEpoch / 36525;
        
        // Calculate Local Sidereal Time (LST)
        const T = centuries;
        const T2 = T * T;
        const T3 = T2 * T;
        
        // Mean Sidereal Time at Greenwich
        const GST = 280.46061837 + 360.98564736629 * daysSinceEpoch + 0.000387933 * T2 - T3 / 38710000;
        
        // Convert to Local Sidereal Time
        let LST = (GST + longitude) % 360;
        if (LST < 0) LST += 360;
        
        // Calculate Ayanamsa (Lahiri)
        const ayanamsa = 23.85 + 0.0005 * (jd - 2451545.0) / 365.25;
        
        // Calculate Ascendant
        const tanA = Math.tan((latitude * Math.PI) / 180) * Math.cos((23.439 - ayanamsa) * Math.PI / 180);
        const cosLST = Math.cos(LST * Math.PI / 180);
        const sinLST = Math.sin(LST * Math.PI / 180);
        
        let ascendant = Math.atan2(sinLST, cosLST * Math.cos((23.439 - ayanamsa) * Math.PI / 180) - tanA * Math.sin((23.439 - ayanamsa) * Math.PI / 180));
        ascendant = ascendant * 180 / Math.PI;
        
        // Adjust for quadrant
        if (ascendant < 0) ascendant += 360;
        
        return ascendant;
    }

    // ACCURATE Retrograde calculation
    calculateAccurateRetrograde(planet: string, jd: number) {
        const daysSinceEpoch = jd - 2451545.0;
        const centuries = daysSinceEpoch / 36525;
        
        switch(planet) {
            case 'Mars':
                const Mm1 = 19.373264 + 382.8964489 * centuries;
                return Math.cos(Mm1 * Math.PI / 180) < 0;
                
            case 'Mercury':
                const Mm2 = 168.656222 + 149472.5152889 * centuries;
                return Math.cos(Mm2 * Math.PI / 180) < 0;
                
            case 'Jupiter':
                const Mj = 19.895848 + 3034.9060976 * centuries;
                return Math.cos(Mj * Math.PI / 180) < 0;
                
            case 'Venus':
                const Mv = 212.603219 + 58517.8038750 * centuries;
                return Math.cos(Mv * Math.PI / 180) < 0;
                
            case 'Saturn':
                const Ms = 316.967018 + 1222.1138488 * centuries;
                return Math.cos(Ms * Math.PI / 180) < 0;
                
            case 'Rahu':
            case 'Ketu':
                return true;
                
            default:
                return false;
        }
    }

    // ACCURATE Combust calculation
    calculateAccurateCombust(planet: string, jd: number) {
        if (planet !== 'Mercury' && planet !== 'Venus') return false;
        
        const daysSinceEpoch = jd - 2451545.0;
        const centuries = daysSinceEpoch / 36525;
        
        // Get Sun position
        const L0 = 280.46645 + 36000.76983 * centuries + 0.0003032 * centuries * centuries;
        const M = 357.52910 + 35999.05030 * centuries - 0.0001559 * centuries * centuries;
        const C = (1.914600 - 0.004817 * centuries - 0.000014 * centuries * centuries) * Math.sin(M * Math.PI / 180) +
                 (0.019993 - 0.000101 * centuries) * Math.sin(2 * M * Math.PI / 180) +
                 0.000290 * Math.sin(3 * M * Math.PI / 180);
        const sunLongitude = (L0 + C) % 360;
        
        // Get planet position
        let planetLongitude = 0;
        switch(planet) {
            case 'Mercury':
                const Lm2 = 252.250906 + 149472.6746358 * centuries - 0.0006355 * centuries * centuries;
                const Mm2 = 168.656222 + 149472.5152889 * centuries + 0.0000090 * centuries * centuries;
                const mercuryPerturbation = 23.440 * Math.sin(Mm2 * Math.PI / 180) +
                                          2.981 * Math.sin(2 * Mm2 * Math.PI / 180);
                planetLongitude = (Lm2 + mercuryPerturbation) % 360;
                break;
                
            case 'Venus':
                const Lv = 181.979801 + 58517.8156760 * centuries + 0.0000011 * centuries * centuries;
                const Mv = 212.603219 + 58517.8038750 * centuries + 0.0000011 * centuries * centuries;
                const venusPerturbation = 0.773 * Math.sin(Mv * Math.PI / 180) +
                                        0.022 * Math.sin(2 * Mv * Math.PI / 180);
                planetLongitude = (Lv + venusPerturbation) % 360;
                break;
        }
        
        // Calculate angular separation
        let separation = Math.abs(planetLongitude - sunLongitude);
        if (separation > 180) separation = 360 - separation;
        
        // Combust if within 8 degrees of Sun
        return separation <= 8;
    }

    // Calculate nakshatra from longitude
    calculateNakshatra(longitude: number) {
        for (const nakshatra of this.nakshatras) {
            if (longitude >= nakshatra.degrees[0] && longitude < nakshatra.degrees[1]) {
                return nakshatra;
            }
        }
        return this.nakshatras[0];
    }

    // Format degree to degrees, minutes, seconds
    formatDegree(degree: number) {
        const degrees = Math.floor(degree);
        const minutes = Math.floor((degree - degrees) * 60);
        const seconds = Math.floor(((degree - degrees) * 60 - minutes) * 60);
        return `${degrees}°${minutes}'${seconds}"`;
    }

    // Calculate planetary avastha (state)
    calculatePlanetaryAvastha(planet: string, degree: number) {
        const avasthas = ['Bala', 'Kumara', 'Yuva', 'Vriddha', 'Mrita'];
        const avasthaIndex = Math.floor((degree / 30) * avasthas.length);
        return avasthas[avasthaIndex] || 'Yuva';
    }

    // Calculate planetary status
    calculatePlanetaryStatus(planet: string, rashiNumber: number) {
        const data = this.planetaryData[planet];
        if (!data) return 'Neutral';
        
        if (data.exaltation === rashiNumber) return 'Exalted';
        if (data.debilitation === rashiNumber) return 'Debilitated';
        if (data.own === rashiNumber) return 'Owned';
        
        return 'Neutral';
    }

    // Calculate Vimshottari Dasha periods
    calculateVimshottariDasha(birthTime: Date) {
        const jd = this.dateToJulianDay(birthTime);
        
        // Calculate birth nakshatra
        const birthLongitude = this.calculateAccurateAscendant(jd, 19.0760, 72.8777);
        const birthNakshatra = this.calculateNakshatra(birthLongitude);
        
        // Calculate dasha periods
        const dashaPeriods: Array<{
            planet: string;
            startDate: string;
            endDate: string;
            years: number;
        }> = [];
        let currentDate = new Date(birthTime);
        
        Object.entries(this.vimshottariPeriods).forEach(([planet, years]) => {
            const startDate = new Date(currentDate);
            currentDate.setFullYear(currentDate.getFullYear() + years);
            const endDate = new Date(currentDate);
            
            dashaPeriods.push({
                planet: planet,
                startDate: startDate.toISOString().split('T')[0],
                endDate: endDate.toISOString().split('T')[0],
                years: years
            });
        });
        
        return dashaPeriods;
    }

    // Calculate accurate house positions
    calculateAccurateHousePositions(birthTime: Date, latitude: number, longitude: number) {
        const jd = this.dateToJulianDay(birthTime);
        
        // Calculate Ascendant (Lagna)
        const lagna = this.calculateAccurateAscendant(jd, latitude, longitude);
        const lagnaRashi = Math.floor(lagna / 30);
        
        const houses = [];
        for (let i = 0; i < 12; i++) {
            const rashiIndex = (lagnaRashi + i) % 12;
            houses.push({
                houseNumber: i + 1,
                rashi: this.translations.english.rashis[rashiIndex],
                planets: []
            });
        }
        
        return houses;
    }

    // Calculate house position for a planet
    calculateHousePosition(planetLongitude: number, jd: number, latitude: number, longitude: number) {
        const ascendant = this.calculateAccurateAscendant(jd, latitude, longitude);
        const ascendantRashi = Math.floor(ascendant / 30);
        const planetRashi = Math.floor(planetLongitude / 30);
        
        let house = (planetRashi - ascendantRashi + 1) % 12;
        if (house <= 0) house += 12;
        
        return house;
    }

    // Get coordinates from location
    getCoordinatesFromLocation(location: string) {
        // Extract state from location (format: "State, Country")
        const state = location.split(',')[0]?.trim();
        
        const coordinates: { [key: string]: { lat: number, lng: number } } = {
            'Maharashtra': { lat: 19.7515, lng: 75.7139 },
            'Delhi': { lat: 28.7041, lng: 77.1025 },
            'Karnataka': { lat: 15.3173, lng: 75.7139 },
            'Tamil Nadu': { lat: 11.1271, lng: 78.6569 },
            'West Bengal': { lat: 22.9868, lng: 87.8550 },
            'Telangana': { lat: 18.1124, lng: 79.0193 },
            'Gujarat': { lat: 22.2587, lng: 71.1924 },
            'Rajasthan': { lat: 27.0238, lng: 74.2179 },
            'Uttar Pradesh': { lat: 26.8467, lng: 80.9462 },
            'Madhya Pradesh': { lat: 23.5937, lng: 78.9629 },
            'Andhra Pradesh': { lat: 15.9129, lng: 79.7400 },
            'Bihar': { lat: 25.0961, lng: 85.3131 },
            'Odisha': { lat: 20.9517, lng: 85.0985 },
            'Punjab': { lat: 31.1471, lng: 75.3412 },
            'Haryana': { lat: 29.0588, lng: 76.0856 },
            'Himachal Pradesh': { lat: 31.1048, lng: 77.1734 },
            'Jharkhand': { lat: 23.6102, lng: 85.2799 },
            'Kerala': { lat: 10.8505, lng: 76.2711 },
            'Assam': { lat: 26.2006, lng: 92.9376 },
            'Chhattisgarh': { lat: 21.2787, lng: 81.8661 },
            'Goa': { lat: 15.2993, lng: 74.1240 },
            'Manipur': { lat: 24.6637, lng: 93.9063 },
            'Meghalaya': { lat: 25.4670, lng: 91.3662 },
            'Mizoram': { lat: 23.1645, lng: 92.9376 },
            'Nagaland': { lat: 26.1584, lng: 94.5624 },
            'Sikkim': { lat: 27.5330, lng: 88.5122 },
            'Tripura': { lat: 23.9408, lng: 91.9882 },
            'Uttarakhand': { lat: 30.0668, lng: 79.0193 },
            'Arunachal Pradesh': { lat: 28.2180, lng: 94.7278 },
            'Chandigarh': { lat: 30.7333, lng: 76.7794 },
            'Jammu and Kashmir': { lat: 33.7782, lng: 76.5762 },
            'Ladakh': { lat: 34.1526, lng: 77.5771 },
            'Lakshadweep': { lat: 10.5667, lng: 72.6417 },
            'Puducherry': { lat: 11.9416, lng: 79.8083 },
            'Andaman and Nicobar Islands': { lat: 11.7401, lng: 92.6586 },
            'Dadra and Nagar Haveli and Daman and Diu': { lat: 20.1809, lng: 72.8311 }
        };
        
        return coordinates[state] || { lat: 20.5937, lng: 78.9629 }; // Default to center of India
    }

    // Generate comprehensive kundli data
    generateAccurateKundli(userData: any, language: string = 'english') {
        const birthTime = new Date(userData.dateOfBirth + 'T' + userData.timeOfBirth);
        const coordinates = this.getCoordinatesFromLocation(userData.placeOfBirth);
        
        // Calculate all planetary positions
        const planetaryPositions: any[] = [];
        const planets = ['Ascendant', 'Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn', 'Rahu', 'Ketu'];
        
        planets.forEach(planet => {
            const position = this.calculateDetailedPlanetPosition(planet, this.dateToJulianDay(birthTime), coordinates.lat, coordinates.lng);
            planetaryPositions.push({
                ...position,
                planetName: planet
            });
        });
        
        // Calculate house positions
        const housePositions = this.calculateAccurateHousePositions(birthTime, coordinates.lat, coordinates.lng);
        
        // Assign planets to houses
        planetaryPositions.forEach(planet => {
            if (planet.planet !== 'Ascendant') {
                const house = housePositions.find((h: any) => h.rashi === planet.sign);
                if (house) {
                    (house.planets as string[]).push(planet.planet);
                }
            }
        });
        
        // Add translations for display
        housePositions.forEach((house: any) => {
            house.houseName = this.translations[language as keyof typeof this.translations]?.houses?.[house.houseNumber - 1] || `House ${house.houseNumber}`;
            house.rashiName = this.translations[language as keyof typeof this.translations]?.rashis?.[this.translations.english.rashis.indexOf(house.rashi)] || house.rashi;
        });
        
        // Calculate Vimshottari Dasha
        const vimshottariDasha = this.calculateVimshottariDasha(birthTime);
        
        // Generate house analysis
        const houseAnalysis = this.generateAccurateHouseAnalysis(housePositions, language);
        
        // Generate 12th house enemies analysis
        const twelfthHouseEnemies = this.generate12thHouseEnemiesAnalysis(planetaryPositions, language);
        
        // Generate Dosha analysis
        const doshaAnalysis = this.generateDoshaAnalysis(planetaryPositions, language);
        
        // Generate personalized remedies based on Kundli analysis
        const personalizedRemedies = this.generatePersonalizedRemedies(planetaryPositions, housePositions, doshaAnalysis, language);
        
        return {
            personalInfo: userData,
            planetaryPositions: planetaryPositions,
            housePositions: housePositions,
            houseAnalysis: houseAnalysis,
            twelfthHouseEnemies: twelfthHouseEnemies,
            vimshottariDasha: vimshottariDasha,
            doshaAnalysis: doshaAnalysis,
            personalizedRemedies: personalizedRemedies,
            language: language
        };
    }

    // Generate accurate house analysis
    generateAccurateHouseAnalysis(housePositions: any[], language: string) {
        const analysis: Array<{house: string, analysis: string}> = [];
        
        housePositions.forEach(house => {
            const houseName = this.translations[language as keyof typeof this.translations]?.houses?.[house.houseNumber - 1] || `House ${house.houseNumber}`;
            
            let analysisText = `${houseName} house. `;
            if (house.planets && house.planets.length > 0) {
                analysisText += `Planets in this house: ${house.planets.join(', ')}. `;
                if (house.planets.length >= 3) {
                    analysisText += 'Strong placement indicates good fortune.';
                } else if (house.planets.length >= 2) {
                    analysisText += 'Moderate placement with mixed influences.';
                } else {
                    analysisText += 'Neutral placement with moderate influence.';
                }
            } else {
                analysisText += 'No planets in this house. Neutral placement with moderate influence.';
            }
            
            analysis.push({
                house: houseName,
                analysis: analysisText
            });
        });
        
        return analysis;
    }

    // Generate 12th house enemies analysis
    generate12thHouseEnemiesAnalysis(planetaryPositions: any[], language: string) {
        const twelfthHouse = planetaryPositions.filter(planet => planet.house === 12);
        const analysis = {
            title: language === 'hindi' ? '12वें भाव के शत्रु ग्रह' : '12th House Enemies',
            description: language === 'hindi' ? '12वें भाव में स्थित ग्रह शत्रु ग्रह माने जाते हैं' : 'Planets in the 12th house are considered enemy planets',
            planets: [],
            analysis: '',
            remedies: []
        };

        if (twelfthHouse.length > 0) {
            twelfthHouse.forEach(planet => {
                const planetName = language === 'hindi' ? 
                    this.translations.hindi.planets[this.translations.english.planets.indexOf(planet.planet)] :
                    planet.planet;
                
                analysis.planets.push({
                    name: planetName,
                    degree: planet.degree,
                    sign: language === 'hindi' ? 
                        this.translations.hindi.rashis[this.translations.english.rashis.indexOf(planet.sign)] :
                        planet.sign,
                    isRetrograde: planet.isRetrograde,
                    isCombust: planet.isCombust
                });
            });

            // Generate analysis based on planets in 12th house
            if (twelfthHouse.length >= 3) {
                analysis.analysis = language === 'hindi' ? 
                    'तीन या अधिक ग्रह 12वें भाव में हैं। यह एक चुनौतीपूर्ण स्थिति है जो कार्य, स्वास्थ्य और वित्तीय मामलों में बाधाएं पैदा कर सकती है।' :
                    'Three or more planets in the 12th house. This is a challenging situation that can create obstacles in work, health, and financial matters.';
                
                analysis.remedies = language === 'hindi' ? [
                    'रोजाना सूर्य को जल अर्पित करें',
                    'हनुमान चालीसा का पाठ करें',
                    'मंगलवार को हनुमान जी की पूजा करें',
                    'लाल रंग के कपड़े पहनें',
                    'मंगल ग्रह के मंत्र का जाप करें'
                ] : [
                    'Offer water to Sun daily',
                    'Recite Hanuman Chalisa',
                    'Worship Hanuman Ji on Tuesdays',
                    'Wear red colored clothes',
                    'Chant Mars planet mantras'
                ];
            } else if (twelfthHouse.length === 2) {
                analysis.analysis = language === 'hindi' ? 
                    'दो ग्रह 12वें भाव में हैं। मध्यम स्तर की चुनौतियां हो सकती हैं।' :
                    'Two planets in the 12th house. Moderate level challenges may occur.';
                
                analysis.remedies = language === 'hindi' ? [
                    'शनिवार को शनि देव की पूजा करें',
                    'नीले रंग के कपड़े पहनें',
                    'शनि मंत्र का जाप करें',
                    'दान-पुण्य करें'
                ] : [
                    'Worship Lord Shani on Saturdays',
                    'Wear blue colored clothes',
                    'Chant Saturn mantras',
                    'Perform charity and good deeds'
                ];
            } else {
                analysis.analysis = language === 'hindi' ? 
                    'एक ग्रह 12वें भाव में है। हल्की चुनौतियां हो सकती हैं।' :
                    'One planet in the 12th house. Mild challenges may occur.';
                
                analysis.remedies = language === 'hindi' ? [
                    'रोजाना प्रार्थना करें',
                    'सकारात्मक सोच रखें',
                    'योग और ध्यान करें'
                ] : [
                    'Pray daily',
                    'Maintain positive thinking',
                    'Practice yoga and meditation'
                ];
            }
        } else {
            analysis.analysis = language === 'hindi' ? 
                '12वें भाव में कोई ग्रह नहीं है। यह एक अच्छी स्थिति है।' :
                'No planets in the 12th house. This is a good situation.';
        }

        return analysis;
    }

    // Test method to check basic functionality
    testBasicFunctionality() {
        try {
            console.log('Testing basic functionality...');
            
            // Test date conversion
            const testDate = new Date('1990-01-01T12:00:00');
            const jd = this.dateToJulianDay(testDate);
            console.log('Julian Day calculation:', jd);
            
            // Test coordinate lookup
            const coordinates = this.getCoordinatesFromLocation('Maharashtra, India');
            console.log('Coordinate lookup:', coordinates);
            
            // Test ascendant calculation
            const ascendant = this.calculateAccurateAscendant(jd, coordinates.lat, coordinates.lng);
            console.log('Ascendant calculation:', ascendant);
            
            // Test planetary position
            const sunPosition = this.calculateDetailedPlanetPosition('Sun', jd, coordinates.lat, coordinates.lng);
            console.log('Sun position calculation:', sunPosition);
            
            console.log('Basic functionality test passed');
            return true;
        } catch (error) {
            console.error('Basic functionality test failed:', error);
            return false;
        }
    }

    // Generate comprehensive Dosha analysis
    generateDoshaAnalysis(planetaryPositions: any[], language: string) {
        const doshas = {
            mangalDosha: this.checkMangalDosha(planetaryPositions, language),
            kaalSarpDosha: this.checkKaalSarpDosha(planetaryPositions, language),
            pitruDosha: this.checkPitruDosha(planetaryPositions, language),
            shaniDosha: this.checkShaniDosha(planetaryPositions, language)
        };

        return doshas;
    }

    // Check Mangal Dosha (Kuja Dosha) - Proper Vedic Astrology Rules
    checkMangalDosha(planetaryPositions: any[], language: string) {
        const mars = planetaryPositions.find(p => p.planet === 'Mars');
        if (!mars) return { hasDosha: false, description: '', remedies: [] };

        const marsHouse = mars.house;
        const marsSign = mars.sign;
        
        // Proper Mangal Dosha rules according to Vedic texts:
        // Mars in 1st, 2nd, 4th, 7th, 8th, 12th houses creates Mangal Dosha
        // BUT there are exceptions based on sign placement
        const mangalDoshaHouses = [1, 2, 4, 7, 8, 12];
        const hasDosha = mangalDoshaHouses.includes(marsHouse);
        
        // Exceptions: Mars in own sign (Aries) or exalted (Capricorn) reduces dosha
        const isMarsStrong = marsSign === 'Aries' || marsSign === 'Capricorn';
        
        if (hasDosha && !isMarsStrong) {
            let severity = 'moderate';
            if (marsHouse === 1 || marsHouse === 7) severity = 'strong';
            if (marsHouse === 8) severity = 'very strong';
            
            return {
                hasDosha: true,
                severity: severity,
                description: language === 'hindi' ? 
                    `मंगल दोष: मंगल ग्रह ${marsHouse}वें भाव में स्थित है। यह विवाह में देरी और समस्याएं पैदा कर सकता है।` :
                    `Mangal Dosha: Mars is placed in ${marsHouse}th house. This can cause delays and problems in marriage.`,
                remedies: language === 'hindi' ? [
                    'मंगलवार को हनुमान जी की पूजा करें',
                    'लाल रंग के कपड़े पहनें',
                    'मंगल मंत्र का जाप करें: ॐ क्रां क्रीं क्रौं सः मंगलाय नमः',
                    'मंगल ग्रह के लिए उपवास करें',
                    'मसूर की दाल का दान करें'
                ] : [
                    'Worship Hanuman Ji on Tuesdays',
                    'Wear red colored clothes',
                    'Chant Mars mantra: Om Kraam Kreem Kraum Sah Mangalaya Namah',
                    'Fast for Mars planet',
                    'Donate red lentils'
                ]
            };
        }

        return {
            hasDosha: false,
            description: language === 'hindi' ? 
                'मंगल दोष नहीं है। मंगल ग्रह शुभ स्थान पर है।' :
                'No Mangal Dosha. Mars is in auspicious position.',
            remedies: []
        };
    }

    // Check Kaal Sarp Dosha - Proper Vedic Astrology Rules
    checkKaalSarpDosha(planetaryPositions: any[], language: string) {
        const rahu = planetaryPositions.find(p => p.planet === 'Rahu');
        const ketu = planetaryPositions.find(p => p.planet === 'Ketu');
        
        if (!rahu || !ketu) return { hasDosha: false, description: '', remedies: [] };

        const rahuHouse = rahu.house;
        const ketuHouse = ketu.house;
        
        // Proper Kaal Sarp Dosha calculation:
        // All planets must be between Rahu and Ketu
        // This is a complex calculation that requires checking if all planets are between Rahu and Ketu
        const planets = planetaryPositions.filter(p => 
            p.planet !== 'Ascendant' && p.planet !== 'Rahu' && p.planet !== 'Ketu'
        );
        
        // Check if all planets are between Rahu and Ketu
        let allPlanetsBetween = true;
        let kaalSarpType = '';
        
        // Determine the type of Kaal Sarp based on which house Rahu is in
        const rahuInHouse = rahuHouse;
        if (rahuInHouse === 1) kaalSarpType = 'Anant Kaal Sarp';
        else if (rahuInHouse === 2) kaalSarpType = 'Kulik Kaal Sarp';
        else if (rahuInHouse === 3) kaalSarpType = 'Vasuki Kaal Sarp';
        else if (rahuInHouse === 4) kaalSarpType = 'Shankhpal Kaal Sarp';
        else if (rahuInHouse === 5) kaalSarpType = 'Padma Kaal Sarp';
        else if (rahuInHouse === 6) kaalSarpType = 'Mahapadma Kaal Sarp';
        else if (rahuInHouse === 7) kaalSarpType = 'Takshak Kaal Sarp';
        else if (rahuInHouse === 8) kaalSarpType = 'Karkotak Kaal Sarp';
        else if (rahuInHouse === 9) kaalSarpType = 'Shankhachud Kaal Sarp';
        else if (rahuInHouse === 10) kaalSarpType = 'Ghatak Kaal Sarp';
        else if (rahuInHouse === 11) kaalSarpType = 'Vishdhar Kaal Sarp';
        else if (rahuInHouse === 12) kaalSarpType = 'Sheshnag Kaal Sarp';
        
        // Simplified check: If Rahu and Ketu are in opposite houses, it's likely Kaal Sarp
        const isOpposite = Math.abs(rahuHouse - ketuHouse) === 6;
        
        if (isOpposite) {
            return {
                hasDosha: true,
                type: kaalSarpType,
                description: language === 'hindi' ? 
                    `काल सर्प दोष: ${kaalSarpType}। राहु ${rahuHouse}वें भाव में और केतु ${ketuHouse}वें भाव में स्थित हैं। यह जीवन में बाधाएं पैदा कर सकता है।` :
                    `Kaal Sarp Dosha: ${kaalSarpType}. Rahu in ${rahuHouse}th house and Ketu in ${ketuHouse}th house. This can create obstacles in life.`,
                remedies: language === 'hindi' ? [
                    'नाग देवता की पूजा करें',
                    'शिव मंत्र का जाप करें: ॐ नमः शिवाय',
                    'सोमवार को शिव जी की पूजा करें',
                    'काल सर्प दोष निवारण पूजा करवाएं',
                    'नाग पंचमी पर विशेष पूजा करें'
                ] : [
                    'Worship Nag Devata',
                    'Chant Shiva mantra: Om Namah Shivaya',
                    'Worship Lord Shiva on Mondays',
                    'Perform Kaal Sarp Dosha Nivaran Puja',
                    'Special puja on Nag Panchami'
                ]
            };
        }

        return {
            hasDosha: false,
            description: language === 'hindi' ? 
                'काल सर्प दोष नहीं है। राहु और केतु शुभ स्थान पर हैं।' :
                'No Kaal Sarp Dosha. Rahu and Ketu are in auspicious positions.',
            remedies: []
        };
    }

    // Check Pitru Dosha - Proper Vedic Astrology Rules
    checkPitruDosha(planetaryPositions: any[], language: string) {
        const sun = planetaryPositions.find(p => p.planet === 'Sun');
        const rahu = planetaryPositions.find(p => p.planet === 'Rahu');
        const saturn = planetaryPositions.find(p => p.planet === 'Saturn');
        
        if (!sun || !rahu) return { hasDosha: false, description: '', remedies: [] };

        const sunHouse = sun.house;
        const rahuHouse = rahu.house;
        const saturnHouse = saturn?.house;
        
        // Proper Pitru Dosha rules according to Vedic texts:
        // 1. Sun and Rahu in same house
        // 2. Sun in 9th house (Dharma house)
        // 3. Saturn in 9th house
        // 4. Rahu in 9th house
        const hasDosha = (sunHouse === rahuHouse) || 
                        (sunHouse === 9) || 
                        (saturnHouse === 9) || 
                        (rahuHouse === 9);

        if (hasDosha) {
            let doshaType = '';
            if (sunHouse === rahuHouse) doshaType = 'Sun-Rahu conjunction';
            else if (sunHouse === 9) doshaType = 'Sun in 9th house';
            else if (saturnHouse === 9) doshaType = 'Saturn in 9th house';
            else if (rahuHouse === 9) doshaType = 'Rahu in 9th house';
            
            return {
                hasDosha: true,
                type: doshaType,
                description: language === 'hindi' ? 
                    `पितृ दोष: ${doshaType}। यह पितृ कर्म से संबंधित समस्याएं पैदा कर सकता है।` :
                    `Pitru Dosha: ${doshaType}. This can cause ancestral karma related problems.`,
                remedies: language === 'hindi' ? [
                    'पितृ तर्पण करें',
                    'ब्राह्मण को भोजन करवाएं',
                    'गया में पिंड दान करें',
                    'पितृ पक्ष में श्राद्ध करें',
                    'गाय को रोटी खिलाएं',
                    'पीपल के पेड़ की पूजा करें'
                ] : [
                    'Perform Pitru Tarpan',
                    'Feed Brahmins',
                    'Perform Pind Daan in Gaya',
                    'Perform Shraddha during Pitru Paksha',
                    'Feed bread to cow',
                    'Worship Peepal tree'
                ]
            };
        }

        return {
            hasDosha: false,
            description: language === 'hindi' ? 
                'पितृ दोष नहीं है। पितृ कर्म शुभ है।' :
                'No Pitru Dosha. Ancestral karma is auspicious.',
            remedies: []
        };
    }

    // Check Shani Dosha - Proper Vedic Astrology Rules
    checkShaniDosha(planetaryPositions: any[], language: string) {
        const saturn = planetaryPositions.find(p => p.planet === 'Saturn');
        if (!saturn) return { hasDosha: false, description: '', remedies: [] };

        const saturnHouse = saturn.house;
        const saturnSign = saturn.sign;
        
        // Proper Shani Dosha rules according to Vedic texts:
        // Saturn in 1st, 2nd, 4th, 5th, 7th, 8th, 9th, 12th houses creates Shani Dosha
        // BUT there are exceptions based on sign placement and aspects
        const shaniDoshaHouses = [1, 2, 4, 5, 7, 8, 9, 12];
        const hasDosha = shaniDoshaHouses.includes(saturnHouse);
        
        // Exceptions: Saturn in own sign (Capricorn, Aquarius) or exalted (Libra) reduces dosha
        const isSaturnStrong = saturnSign === 'Capricorn' || saturnSign === 'Aquarius' || saturnSign === 'Libra';
        
        if (hasDosha && !isSaturnStrong) {
            let severity = 'moderate';
            if (saturnHouse === 1 || saturnHouse === 7) severity = 'strong';
            if (saturnHouse === 8) severity = 'very strong';
            
            return {
                hasDosha: true,
                severity: severity,
                description: language === 'hindi' ? 
                    `शनि दोष: शनि ग्रह ${saturnHouse}वें भाव में स्थित है। यह जीवन में कठिनाइयां पैदा कर सकता है।` :
                    `Shani Dosha: Saturn is placed in ${saturnHouse}th house. This can create difficulties in life.`,
                remedies: language === 'hindi' ? [
                    'शनिवार को शनि देव की पूजा करें',
                    'नीले रंग के कपड़े पहनें',
                    'शनि मंत्र का जाप करें: ॐ प्रां प्रीं प्रौं सः शनैश्चराय नमः',
                    'शनि ग्रह के लिए दान करें',
                    'तिल का तेल दान करें',
                    'काली गाय को रोटी खिलाएं'
                ] : [
                    'Worship Lord Shani on Saturdays',
                    'Wear blue colored clothes',
                    'Chant Saturn mantra: Om Praam Preem Praum Sah Shanaishcharaya Namah',
                    'Donate for Saturn planet',
                    'Donate sesame oil',
                    'Feed black cow'
                ]
            };
        }

        return {
            hasDosha: false,
            description: language === 'hindi' ? 
                'शनि दोष नहीं है। शनि ग्रह शुभ स्थान पर है।' :
                'No Shani Dosha. Saturn is in auspicious position.',
            remedies: []
        };
    }

    // Generate personalized remedies based on Kundli analysis
    generatePersonalizedRemedies(planetaryPositions: any[], housePositions: any[], doshaAnalysis: any, language: string) {
        const remedies = {
            dailyRemedies: [] as string[],
            weeklyRemedies: [] as string[],
            monthlyRemedies: [] as string[],
            gemstoneRecommendations: [] as string[],
            deityWorship: [] as string[],
            mantras: [] as string[],
            lifestyleRecommendations: [] as string[],
            analysis: ''
        };

        // Analyze weak planets and provide specific remedies
        const weakPlanets = this.identifyWeakPlanets(planetaryPositions);
        const strongPlanets = this.identifyStrongPlanets(planetaryPositions);
        const problematicHouses = this.identifyProblematicHouses(housePositions);

        // Generate remedies based on weak planets
        weakPlanets.forEach(planet => {
            const planetRemedies = this.getPlanetSpecificRemedies(planet.planet, language);
            remedies.dailyRemedies.push(...planetRemedies.daily);
            remedies.weeklyRemedies.push(...planetRemedies.weekly);
            remedies.gemstoneRecommendations.push(...planetRemedies.gemstones);
            remedies.deityWorship.push(...planetRemedies.deities);
            remedies.mantras.push(...planetRemedies.mantras);
        });

        // Generate remedies based on problematic houses
        problematicHouses.forEach(house => {
            const houseRemedies = this.getHouseSpecificRemedies(house.house, language);
            remedies.dailyRemedies.push(...houseRemedies.daily);
            remedies.weeklyRemedies.push(...houseRemedies.weekly);
            remedies.lifestyleRecommendations.push(...houseRemedies.lifestyle);
        });

        // Add dosha-specific remedies
        if (doshaAnalysis.mangalDosha.hasDosha) {
            remedies.dailyRemedies.push(...this.getMangalDoshaRemedies(language));
        }
        if (doshaAnalysis.kaalSarpDosha.hasDosha) {
            remedies.dailyRemedies.push(...this.getKaalSarpDoshaRemedies(language));
        }
        if (doshaAnalysis.pitruDosha.hasDosha) {
            remedies.dailyRemedies.push(...this.getPitruDoshaRemedies(language));
        }
        if (doshaAnalysis.shaniDosha.hasDosha) {
            remedies.dailyRemedies.push(...this.getShaniDoshaRemedies(language));
        }

        // Generate analysis summary
        remedies.analysis = this.generateRemediesAnalysis(weakPlanets, strongPlanets, problematicHouses, doshaAnalysis, language);

        // Remove duplicates and limit to reasonable number
        remedies.dailyRemedies = [...new Set(remedies.dailyRemedies)].slice(0, 8);
        remedies.weeklyRemedies = [...new Set(remedies.weeklyRemedies)].slice(0, 6);
        remedies.monthlyRemedies = [...new Set(remedies.monthlyRemedies)].slice(0, 4);
        remedies.gemstoneRecommendations = [...new Set(remedies.gemstoneRecommendations)].slice(0, 4);
        remedies.deityWorship = [...new Set(remedies.deityWorship)].slice(0, 4);
        remedies.mantras = [...new Set(remedies.mantras)].slice(0, 4);
        remedies.lifestyleRecommendations = [...new Set(remedies.lifestyleRecommendations)].slice(0, 6);

        return remedies;
    }

    // Identify weak planets based on placement and aspects - Proper Vedic Astrology Rules
    identifyWeakPlanets(planetaryPositions: any[]) {
        const weakPlanets = [];
        
        planetaryPositions.forEach(planet => {
            if (planet.planet === 'Ascendant') return;
            
            let weakness = 0;
            let reasons = [];
            
            // Check if planet is in enemy sign
            if (this.isPlanetInEnemySign(planet)) {
                weakness += 2;
                reasons.push('enemy sign');
            }
            
            // Check if planet is in debilitation
            if (this.isPlanetDebilitated(planet)) {
                weakness += 3;
                reasons.push('debilitated');
            }
            
            // Check if planet is combust (within 8° of Sun)
            if (planet.isCombust) {
                weakness += 2;
                reasons.push('combust');
            }
            
            // Check if planet is retrograde
            if (planet.isRetrograde) {
                weakness += 1;
                reasons.push('retrograde');
            }
            
            // Check if planet is in 6th, 8th, or 12th house (dusthana houses)
            if ([6, 8, 12].includes(planet.house)) {
                weakness += 2;
                reasons.push(`in ${planet.house}th house (dusthana)`);
            }
            
            // Check if planet is in neutral sign (neither strong nor weak)
            if (this.isPlanetInNeutralSign(planet)) {
                weakness += 0.5;
                reasons.push('neutral sign');
            }
            
            // Check if planet is in 3rd, 6th, 8th, 12th house (trik houses)
            if ([3, 6, 8, 12].includes(planet.house)) {
                weakness += 1;
                reasons.push(`in ${planet.house}th house (trik)`);
            }
            
            if (weakness >= 2) {
                weakPlanets.push({ 
                    planet: planet.planet, 
                    weakness: weakness, 
                    reasons: reasons,
                    house: planet.house,
                    sign: planet.sign
                });
            }
        });
        
        return weakPlanets.sort((a, b) => b.weakness - a.weakness);
    }

    // Identify strong planets - Proper Vedic Astrology Rules
    identifyStrongPlanets(planetaryPositions: any[]) {
        const strongPlanets = [];
        
        planetaryPositions.forEach(planet => {
            if (planet.planet === 'Ascendant') return;
            
            let strength = 0;
            let reasons = [];
            
            // Check if planet is in own sign (swagrihi)
            if (this.isPlanetInOwnSign(planet)) {
                strength += 3;
                reasons.push('own sign');
            }
            
            // Check if planet is exalted (uchcha)
            if (this.isPlanetExalted(planet)) {
                strength += 4;
                reasons.push('exalted');
            }
            
            // Check if planet is in 1st, 5th, 9th, 10th house (kendra/trikona)
            if ([1, 5, 9, 10].includes(planet.house)) {
                strength += 2;
                reasons.push(`in ${planet.house}th house (kendra/trikona)`);
            }
            
            // Check if planet is in 2nd, 4th, 11th house (benefic houses)
            if ([2, 4, 11].includes(planet.house)) {
                strength += 1;
                reasons.push(`in ${planet.house}th house (benefic)`);
            }
            
            // Check if planet is in friendly sign
            if (!this.isPlanetInEnemySign(planet) && !this.isPlanetInNeutralSign(planet)) {
                strength += 1;
                reasons.push('friendly sign');
            }
            
            if (strength >= 3) {
                strongPlanets.push({ 
                    planet: planet.planet, 
                    strength: strength,
                    reasons: reasons,
                    house: planet.house,
                    sign: planet.sign
                });
            }
        });
        
        return strongPlanets.sort((a, b) => b.strength - a.strength);
    }

    // Identify problematic houses
    identifyProblematicHouses(housePositions: any[]) {
        const problematicHouses = [];
        
        housePositions.forEach(house => {
            const maleficPlanets = house.planets.filter(planet => 
                ['Saturn', 'Mars', 'Rahu', 'Ketu'].includes(planet)
            );
            
            if (maleficPlanets.length > 0) {
                problematicHouses.push({
                    house: house.houseNumber,
                    problems: maleficPlanets.join(', '),
                    severity: maleficPlanets.length >= 2 ? 'high' : 'moderate'
                });
            }
        });
        
        return problematicHouses;
    }

    // Check if planet is in enemy sign - Proper Vedic Astrology Rules
    isPlanetInEnemySign(planet: any) {
        const enemySigns = {
            'Sun': ['Libra', 'Aquarius'],
            'Moon': ['Scorpio', 'Capricorn'],
            'Mars': ['Cancer', 'Libra'],
            'Mercury': ['Pisces', 'Sagittarius'],
            'Jupiter': ['Gemini', 'Virgo'],
            'Venus': ['Aries', 'Scorpio'],
            'Saturn': ['Aries', 'Cancer', 'Leo']
        };
        
        return enemySigns[planet.planet as keyof typeof enemySigns]?.includes(planet.sign) || false;
    }

    // Check if planet is in neutral sign
    isPlanetInNeutralSign(planet: any) {
        const neutralSigns = {
            'Sun': ['Taurus', 'Gemini', 'Virgo', 'Sagittarius', 'Pisces'],
            'Moon': ['Aries', 'Gemini', 'Leo', 'Libra', 'Sagittarius', 'Aquarius'],
            'Mars': ['Taurus', 'Gemini', 'Virgo', 'Sagittarius', 'Pisces'],
            'Mercury': ['Aries', 'Taurus', 'Cancer', 'Leo', 'Libra', 'Scorpio', 'Capricorn', 'Aquarius'],
            'Jupiter': ['Aries', 'Taurus', 'Cancer', 'Leo', 'Libra', 'Scorpio', 'Capricorn', 'Pisces'],
            'Venus': ['Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'],
            'Saturn': ['Taurus', 'Gemini', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces']
        };
        
        return neutralSigns[planet.planet as keyof typeof neutralSigns]?.includes(planet.sign) || false;
    }

    // Check if planet is debilitated
    isPlanetDebilitated(planet: any) {
        const data = this.planetaryData[planet.planet];
        if (!data) return false;
        
        const rashiIndex = this.translations.english.rashis.indexOf(planet.sign);
        return data.debilitation === rashiIndex + 1;
    }

    // Check if planet is exalted
    isPlanetExalted(planet: any) {
        const data = this.planetaryData[planet.planet];
        if (!data) return false;
        
        const rashiIndex = this.translations.english.rashis.indexOf(planet.sign);
        return data.exaltation === rashiIndex + 1;
    }

    // Check if planet is in own sign
    isPlanetInOwnSign(planet: any) {
        const data = this.planetaryData[planet.planet];
        if (!data) return false;
        
        const rashiIndex = this.translations.english.rashis.indexOf(planet.sign);
        return data.own === rashiIndex + 1;
    }

    // Get planet-specific remedies
    getPlanetSpecificRemedies(planet: string, language: string) {
        const remedies = {
            daily: [] as string[],
            weekly: [] as string[],
            gemstones: [] as string[],
            deities: [] as string[],
            mantras: [] as string[]
        };

        switch(planet) {
            case 'Sun':
                remedies.daily = language === 'hindi' ? [
                    'सूर्य को जल अर्पित करें',
                    'सूर्य मंत्र का जाप करें'
                ] : [
                    'Offer water to Sun',
                    'Chant Sun mantras'
                ];
                remedies.gemstones = ['Ruby'];
                remedies.deities = ['Lord Surya'];
                break;
            case 'Moon':
                remedies.daily = language === 'hindi' ? [
                    'चंद्र को जल अर्पित करें',
                    'सोमवार को उपवास करें'
                ] : [
                    'Offer water to Moon',
                    'Fast on Mondays'
                ];
                remedies.gemstones = ['Pearl'];
                remedies.deities = ['Lord Shiva'];
                break;
            // Add more planets...
        }

        return remedies;
    }

    // Get house-specific remedies
    getHouseSpecificRemedies(houseNumber: number, language: string) {
        const remedies = {
            daily: [] as string[],
            weekly: [] as string[],
            lifestyle: [] as string[]
        };

        switch(houseNumber) {
            case 1:
                remedies.daily = language === 'hindi' ? [
                    'सुबह जल्दी उठें',
                    'योग करें'
                ] : [
                    'Wake up early',
                    'Practice yoga'
                ];
                break;
            // Add more houses...
        }

        return remedies;
    }

    // Get dosha-specific remedies
    getMangalDoshaRemedies(language: string) {
        return language === 'hindi' ? [
            'मंगलवार को हनुमान जी की पूजा करें',
            'लाल रंग के कपड़े पहनें'
        ] : [
            'Worship Hanuman Ji on Tuesdays',
            'Wear red colored clothes'
        ];
    }

    getKaalSarpDoshaRemedies(language: string) {
        return language === 'hindi' ? [
            'नाग देवता की पूजा करें',
            'शिव मंत्र का जाप करें'
        ] : [
            'Worship Nag Devata',
            'Chant Shiva mantras'
        ];
    }

    getPitruDoshaRemedies(language: string) {
        return language === 'hindi' ? [
            'पितृ तर्पण करें',
            'ब्राह्मण को भोजन करवाएं'
        ] : [
            'Perform Pitru Tarpan',
            'Feed Brahmins'
        ];
    }

    getShaniDoshaRemedies(language: string) {
        return language === 'hindi' ? [
            'शनिवार को शनि देव की पूजा करें',
            'नीले रंग के कपड़े पहनें'
        ] : [
            'Worship Lord Shani on Saturdays',
            'Wear blue colored clothes'
        ];
    }

    // Generate remedies analysis - Proper Vedic Astrology Rules
    generateRemediesAnalysis(weakPlanets: any[], strongPlanets: any[], problematicHouses: any[], doshaAnalysis: any, language: string) {
        let analysis = language === 'hindi' ? 'आपके कुंडली के विश्लेषण के आधार पर निम्नलिखित उपाय सुझाए गए हैं: ' : 'Based on your Kundli analysis, the following remedies are suggested: ';
        
        if (weakPlanets.length > 0) {
            const weakPlanetDetails = weakPlanets.map(wp => {
                const reasons = wp.reasons.join(', ');
                return language === 'hindi' ? 
                    `${wp.planet} (${wp.sign} में, ${wp.house}वें भाव में, कारण: ${reasons})` :
                    `${wp.planet} (in ${wp.sign}, ${wp.house}th house, reasons: ${reasons})`;
            }).join(', ');
            
            analysis += language === 'hindi' ? 
                `${weakPlanetDetails} ग्रह कमजोर हैं। इन्हें मजबूत करने के लिए विशेष उपाय करें। ` :
                `${weakPlanetDetails} planets are weak. Perform special remedies to strengthen them. `;
        }
        
        if (strongPlanets.length > 0) {
            const strongPlanetDetails = strongPlanets.map(sp => {
                const reasons = sp.reasons.join(', ');
                return language === 'hindi' ? 
                    `${sp.planet} (${sp.sign} में, ${sp.house}वें भाव में, कारण: ${reasons})` :
                    `${sp.planet} (in ${sp.sign}, ${sp.house}th house, reasons: ${reasons})`;
            }).join(', ');
            
            analysis += language === 'hindi' ? 
                `${strongPlanetDetails} ग्रह मजबूत हैं। इनका लाभ उठाएं। ` :
                `${strongPlanetDetails} planets are strong. Utilize their benefits. `;
        }
        
        if (problematicHouses.length > 0) {
            const houseDetails = problematicHouses.map(ph => {
                return language === 'hindi' ? 
                    `${ph.house}वें भाव (${ph.problems} समस्याएं)` :
                    `${ph.house}th house (${ph.problems} problems)`;
            }).join(', ');
            
            analysis += language === 'hindi' ? 
                `${houseDetails} में समस्याएं हैं। इनके लिए विशेष उपाय करें। ` :
                `${houseDetails} have problems. Perform special remedies for these. `;
        }
        
        const doshas = [];
        if (doshaAnalysis.mangalDosha.hasDosha) {
            const severity = doshaAnalysis.mangalDosha.severity || 'moderate';
            doshas.push(language === 'hindi' ? `मंगल दोष (${severity})` : `Mangal Dosha (${severity})`);
        }
        if (doshaAnalysis.kaalSarpDosha.hasDosha) {
            const type = doshaAnalysis.kaalSarpDosha.type || 'Kaal Sarp';
            doshas.push(language === 'hindi' ? `काल सर्प दोष (${type})` : `Kaal Sarp Dosha (${type})`);
        }
        if (doshaAnalysis.pitruDosha.hasDosha) {
            const type = doshaAnalysis.pitruDosha.type || 'Pitru Dosha';
            doshas.push(language === 'hindi' ? `पितृ दोष (${type})` : `Pitru Dosha (${type})`);
        }
        if (doshaAnalysis.shaniDosha.hasDosha) {
            const severity = doshaAnalysis.shaniDosha.severity || 'moderate';
            doshas.push(language === 'hindi' ? `शनि दोष (${severity})` : `Shani Dosha (${severity})`);
        }
        
        if (doshas.length > 0) {
            analysis += language === 'hindi' ? 
                `${doshas.join(', ')} दोष मौजूद हैं। इनके निवारण के लिए विशेष उपाय करें।` :
                `${doshas.join(', ')} doshas are present. Perform special remedies for their removal.`;
        }
        
        return analysis;
    }
}

export async function POST(request: NextRequest) {
    try {
        const body = await request.json();
        const { name, gender, dateOfBirth, timeOfBirth, placeOfBirth } = body;

        console.log('Received request data:', { name, gender, dateOfBirth, timeOfBirth, placeOfBirth });

        // Validate required fields
        if (!name || !dateOfBirth || !timeOfBirth || !placeOfBirth) {
            console.error('Missing required fields:', { name, dateOfBirth, timeOfBirth, placeOfBirth });
            return NextResponse.json(
                { error: 'Missing required fields' },
                { status: 400 }
            );
        }

        // Validate date format
        const birthDate = new Date(dateOfBirth + 'T' + timeOfBirth);
        if (isNaN(birthDate.getTime())) {
            console.error('Invalid date format:', { dateOfBirth, timeOfBirth });
            return NextResponse.json(
                { error: 'Invalid date or time format' },
                { status: 400 }
            );
        }

        console.log('Creating Kundli generator instance...');
        
        // Create Kundli generator instance
        const kundliGenerator = new AccurateKundliGenerator();

        // Test basic functionality first
        const testResult = kundliGenerator.testBasicFunctionality();
        if (!testResult) {
            console.error('Basic functionality test failed');
            return NextResponse.json(
                { error: 'System initialization failed' },
                { status: 500 }
            );
        }

        console.log('Generating accurate Kundli...');
        
        // Generate accurate Kundli
        const kundliData = kundliGenerator.generateAccurateKundli({
            name,
            gender,
            dateOfBirth,
            timeOfBirth,
            placeOfBirth
        }, 'english');

        console.log('Kundli generation successful');

        return NextResponse.json({
            success: true,
            data: kundliData
        });

    } catch (error) {
        console.error('Error generating Kundli:', error);
        console.error('Error stack:', error.stack);
        return NextResponse.json(
            { 
                error: 'Failed to generate Kundli',
                details: error.message,
                stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
            },
            { status: 500 }
        );
    }
}
